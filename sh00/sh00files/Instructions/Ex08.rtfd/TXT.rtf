{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Bold;\f2\froman\fcharset0 Times-Roman;
\f3\froman\fcharset0 Times-Bold;\f4\fmodern\fcharset0 Courier;\f5\fmodern\fcharset0 Courier-Oblique;
\f6\froman\fcharset0 Times-Italic;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red217\green217\blue217;
\red0\green0\blue233;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c100000\c100000\c100000;\cssrgb\c87843\c87843\c87843;
\cssrgb\c0\c0\c93333;}
\margl1440\margr1440\vieww50700\viewh10560\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \ul \ulc0 Solution:\ulnone \
find . -type f \\( -name "*~" -o -name "#*#" \\) -print -delete\
\
\

\f1\b Find
\f0\b0 \
\
\
Find . -type f name==\'93*~\'94\
\
find . -name '*~' -o -name \'91#*#\'92.       ==> works\
\
find . -type f -name '*~' -o -name \'91#*#\'92.    => also includes directories\
\
find . -type f (-name '*~' -o -name \'91#*#\'92).    => error \'93zsh: number expected\'94\
\
find . -type f \\( -name '*~' -o -name '#*#' \\)      => works\
\

\f1\b find . -type f \\( -name '*~' -o -name '#*#' \\)  -delete
\f0\b0 \
\
find . -type f \\( -name '*~' -o -name '#*#' \\) -exec rm \{\} \\+\
\
\
\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \ul \ulc0 Why use escape characters around parentheses in this context ?\ulnone \
\
{\field{\*\fldinst{HYPERLINK "https://tldp.org/LDP/abs/html/special-chars.html"}}{\fldrslt From advanced bash scripting guide}}\
\pard\pardeftab720\partightenfactor0

\f2 \cf2 \cb3 \expnd0\expndtw0\kerning0
()\
\pard\pardeftab720\sa240\partightenfactor0

\f3\b \cf2 command group.\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trcbpat4 \trwWidth13391\trftsWidth3 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth13271\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\partightenfactor0

\f4\b0 \cf2 (a=hello; echo $a)\cb1 \cell \lastrow\row
\pard\pardeftab720\sa240\partightenfactor0

\f2 \cf2 \

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trwWidth13391\trftsWidth3 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth1240\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx4320
\clvertalt \clshdrawnil \clwWidth11951\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\qc\partightenfactor0
\cf2 \cell 
\pard\intbl\itap1\pardeftab720\sa240\partightenfactor0
\cf2 \cb3 A listing of commands within\'a0
\f5\i parentheses
\f2\i0 \'a0starts a\'a0{\field{\*\fldinst{HYPERLINK "https://tldp.org/LDP/abs/html/subshells.html#SUBSHELLSREF"}}{\fldrslt \cf5 \ul \ulc5 subshell}}.\cb1 \
\cb3 Variables inside parentheses, within the subshell, are not visible to the rest of the script. The parent process, the script,\'a0{\field{\*\fldinst{HYPERLINK "https://tldp.org/LDP/abs/html/subshells.html#PARVIS"}}{\fldrslt \cf5 \ul \ulc5 cannot read variables created in the child process}}, the subshell.\

\itap2\trowd \taflags0 \trgaph108\trleft-108 \trcbpat4 \trwWidth10756\trftsWidth3 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalc \clshdrawnil \clwWidth10636\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadt20 \clpadl20 \clpadb20 \clpadr20 \gaph\cellx8640
\pard\intbl\itap2\pardeftab720\partightenfactor0

\f4 \cf2 a=123\
( a=321; )	      \
\
echo "a = $a"   # a = 123\
# "a" within parentheses acts like a local variable.\cb1 \nestcell \lastrow\nestrow\cell \lastrow\row
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://tldp.org/LDP/abs/html/subshells.html#SUBSHELLSREF"}}{\fldrslt 
\f3\b \cf2 \cb3 \expnd0\expndtw0\kerning0
On subshells}}
\f3\b \cf2 \cb3 \expnd0\expndtw0\kerning0
:\
Command List within Parentheses
\f2\b0 \cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 ( command1; command2; command3; ... )\cb1 \
\pard\pardeftab720\sa240\partightenfactor0
\cf2 \cb3 A command list embedded between\'a0
\f5\i parentheses
\f2\i0 \'a0runs as a subshell.\cb1 \
\cb3 Variables in a subshell are\'a0
\f6\i not
\f2\i0 \'a0visible outside the block of code in the subshell. They are not accessible to the\'a0{\field{\*\fldinst{HYPERLINK "https://tldp.org/LDP/abs/html/internal.html#FORKREF"}}{\fldrslt \cf5 \ul \ulc5 parent process}}, to the shell that launched the subshell. These are, in effect, variables\'a0{\field{\*\fldinst{HYPERLINK "https://tldp.org/LDP/abs/html/localvar.html#LOCALREF"}}{\fldrslt \cf5 \ul \ulc5 local}}\'a0to the\'a0
\f6\i child process
\f2\i0 .\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1\b \cf0 On the error message \'93zsh number expected\'94
\f0\b0 \
From ChatGPT: \'93The error message "zsh: number expected" means that the zsh shell is expecting a numeric argument where it found none. In the context of your command, it's expecting a number because when parentheses are used unescaped in zsh (or in most shells), they're used for command grouping and subshells, or for arithmetic operations.\'94\
\
Man find:\
BUGS\
     The special characters used by find are also special characters to many\
    shell programs.  In particular, the characters ``*'', ``['', ``]'',\
     ``?'', ``('', ``)'', ``!'', ``\\'' and ``;'' may have to be escaped from\
     the shell.\
\
\
 
\f1\b   -delete
\f0\b0 \
             Delete found files and/or directories.  Always returns true.\
             This executes from the current working directory as find\
             recurses down the tree.  It will not attempt to delete a file-\
             name with a ``/'' character in its pathname relative to ``.''\
             for security reasons.  Depth-first traversal processing is\
             implied by this option.  Following symlinks is incompatible with\
             this option.\
\
Chatgpt :\
\pard\pardeftab720\partightenfactor0
\cf0 \'93However, not all versions of find support the -delete action. If you're writing a script that you intend to run on different systems, it might be safer to use -exec rm \{\} \\+ because it's more widely supported.\'94\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
\
\
  -regex pattern\
             True if the whole path of the file matches pattern using regular\
             expression.  To match a file named ``./foo/xyzzy'', you can use\
             the regular expression ``.*/[xyz]*'' or ``.*/foo/.*'', but not\
             ``xyzzy'' or ``/foo/''.\
\
\
\
    -type t\
             True if the file is of the specified type.  Possible file types\
             are as follows:\
\
             b       block special\
             c       character special\
             d       directory\
             f       regular file\
             l       symbolic link\
             p       FIFO\
             s       socket\
\
\
\
  find / \\! -name "*.c" -print\
             Print out a list of all the files whose names do not end in .c.\
\
}